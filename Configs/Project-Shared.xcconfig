//
// Project-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 14/1/16
// https://github.com/dempseyatgithub/BuildSettingExtractor
//


// Always Search User Paths
// 
// If enabled both #include <header.h>-style and #include "header.h"-style directives
// will search the paths in "User Header Search Paths" before "Header Search Paths", with
// the consequence that user headers (such as your own String.h header) would have
// precedence over system headers when using #include <header.h>. This is done using the
// -iquote flag for the paths provided in "User Header Search Paths". If disabled and
// your compiler fully supports separate user paths, user headers will only be accessible
// with #include "header.h"-style preprocessor directives.
// 
// For backwards compatibility reasons, this setting is enabled by default, but disabling
// it is strongly recommended.

ALWAYS_SEARCH_USER_PATHS = NO



ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES



// C++ Language Dialect
// 
// Choose a standard or non-standard C++ language dialect.
// 
// C++98: Accept ISO C++ 1998 with amendments, but not GNU extensions. [-std=c++98]
// 
// GNU++98: Accept ISO C++ 1998 with amendments and GNU extensions. [-std=gnu++98]
// 
// C++11: Accept the ISO C++ 2011 standard with amendments, but not GNU extensions.
// [-std=c++11]
// 
// GNU++11: Accept the ISO C++ 2011 standard with amendments and GNU extensions.
// [-std=gnu++11]
// 
// C++14: Accept the ISO C++ 2014 standard with amendments, but not GNU extensions.
// [-std=c++14]
// 
// GNU++14: Accept the ISO C++ 2014 standard with amendments and GNU extensions.
// [-std=gnu++14]
// 
// Compiler Default: Tells the compiler to use its default C++ language dialect. This is
// normally the best choice unless you have specific needs. (Currently equivalent to
// GNU++98.)

CLANG_CXX_LANGUAGE_STANDARD = gnu++0x



// C++ Standard Library
// 
// Choose a version of the C++ standard library to use.
// 
// libstdc++: traditional C++ standard library that works with GCC and the LLVM Compiler
// (default).
// libc++: highly optimized C++ standard library that works only with the LLVM Compiler,
// and is designed to support new C++11 features.

CLANG_CXX_LIBRARY = libc++



// Enable Modules (C and Objective-C)
// 
// Enables the use of modules for system APIs.  System headers are imported as semantic
// modules instead of raw headers.  This can result in faster builds and project
// indexing.  [-fmodules]

CLANG_ENABLE_MODULES = YES



// Objective-C Automatic Reference Counting
// 
// Compiles reference-counted Objective-C code (when garbage collection is not enabled)
// to use Automatic Reference Counting.
// Code compiled using automated reference counting is compatible with other code (e.g.,
// frameworks) compiled using either
// manual reference counting (i.e., traditional "retain" and "release" messages) or
// automated reference counting.  Using this mode is currently
// incompatible with compiling code to use Objective-C Garbage Collection. [-fobjc-arc]

CLANG_ENABLE_OBJC_ARC = YES



// Duplicate Method Definitions
// 
// Warn about declaring the same method more than once within the same @interface.

CLANG_WARN__DUPLICATE_METHOD_MATCH = YES



// Exit-Time C++ Destructors
// 
// Warn about destructors for C++ objects that are called when an application is
// terminating.

CLANG_WARN__EXIT_TIME_DESTRUCTORS = YES



// Out-of-Range Enum Assignments
// 
// Warn about assigning integer constants to enum values that are out of the range of the
// enumerated type.  [-Wassign-enum]

CLANG_WARN_ASSIGN_ENUM = YES



// Implicit Boolean Conversions
// 
// Warn about implicit conversions to boolean values that are suspicious.  For example,
// writing 'if (foo)' with 'foo' being the name a function will trigger a warning.
// [-Wbool-conversion]

CLANG_WARN_BOOL_CONVERSION = YES



// Implicit Constant Conversions
// 
// Warn about implicit conversions of constant values that cause the constant value to
// change, either through a loss of precision, or entirely in its meaning.
// [-Wconstant-conversion]

CLANG_WARN_CONSTANT_CONVERSION = YES



// Using C++11 extensions in earlier versions of C++
// 
// When compiling C++ code using a language standard older than C++11, warn about the use
// of C++11 extensions.

CLANG_WARN_CXX0X_EXTENSIONS = YES



// Overriding Deprecated Objective-C Methods
// 
// Warn if an Objective-C class either subclasses a deprecated class or overrides a
// method that has been marked deprecated.

CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES



// Direct usage of 'isa'
// 
// Warn about direct accesses to the Objective-C 'isa' pointer instead of using a runtime
// API. [-Wdeprecated-objc-isa-usage]

CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR



// Documentation Comments
// 
// Warns about issues in documentation comments (doxygen-style) such as missing or
// incorrect documentation tags.  [-Wdocumentation]

CLANG_WARN_DOCUMENTATION_COMMENTS = NO



// Empty Loop Bodies
// 
// Warn about loop bodies that are suspiciously empty.   [-Wempty-body]

CLANG_WARN_EMPTY_BODY = YES



// Implicit Enum Conversions
// 
// Warn about implicit conversions between different kinds of enum values.  For example,
// this can catch issues when using the wrong enum flag as an argument to a function or
// method.  [-Wenum-conversion]

CLANG_WARN_ENUM_CONVERSION = YES



// Implicit Signedness Conversions
// 
// Warn about implicit integer conversions that change the signedness of an integer
// value.  [-Wsign-conversion]

CLANG_WARN_IMPLICIT_SIGN_CONVERSION = YES



// Implicit Integer to Pointer Conversions
// 
// Warn about implicit conversions between pointers and integers.  For example, this can
// catch issues when one incorrectly intermixes using NSNumber*'s and raw integers.
// [-Wint-conversion]

CLANG_WARN_INT_CONVERSION = YES



// Implicit Atomic Objective-C Properties
// 
// Warn about @property declarations that are implicitly atomic.

CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES = YES



// Implicit retain of 'self' within blocks
// 
// Warn about implicit retains of 'self' within blocks, which can create a retain-cycle.
// CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF, -Wimplicit-retain-self]

CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES



// Unintentional Root Class
// 
// Warn about classes that unintentionally do not subclass a root class (such as
// NSObject).  [-Wobjc-root-class]

CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR



// Suspicious Implicit Conversions
// 
// Warn about various implicit conversions that can lose information or are otherwise
// suspicious.  [-Wconversion]

CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES



// Unreachable Code
// 
// Warns about potentially unreachable code.  [-Wunreachable-code]

CLANG_WARN_UNREACHABLE_CODE = YES



// Strip Debug Symbols During Copy
// 
// Activating this setting causes binary files which are copied during the build (e.g.,
// in a Copy Bundle Resources or Copy Files build phase) to be stripped of debugging
// symbols.  It does not cause the linked product of a target to be stripped (use Strip
// Linked Product for that).

COPY_PHASE_STRIP = NO



// Strip Linked Product
//
// Activating this setting causes the linked product of the build to be stripped of symbols as part of deployment postprocessing.

STRIP_INSTALLED_PRODUCT = NO



// Use Separate Strip
//
// Activating this setting when the linked product is to be stripped will cause stripping to occur via a separate invocation of strip(1).
// Otherwise stripping will occur during linking, if possible.

SEPARATE_STRIP = NO



// Enable Strict Checking of objc_msgSend Calls
// 
// Controls whether objc_msgSend calls must be cast to the appropriate function pointer
// type before being called.

ENABLE_STRICT_OBJC_MSGSEND = YES



// C Language Dialect
// 
// Choose a standard or non-standard C language dialect.
// 
// ANSI C: Accept ISO C90 and ISO C++, turning off GNU extensions that are incompatible.
// [-ansi]
// 
// Incompatible GNU extensions include the 'asm', 'inline', and 'typeof' keywords (but
// not the equivalent __asm__, __inline__, and __typeof__ forms), and the '//' syntax for
// comments.
// 
// This setting also enables trigraphs.
// 
// C89: Accept ISO C90 (1990), but not GNU extensions. [-std=c89]
// 
// GNU89: Accept ISO C90 and GNU extensions. [-std=gnu89]
// 
// C99: Accept ISO C99 (1999), but not GNU extensions. [-std=c99]
// 
// GNU99: Accept ISO C99 and GNU extensions. [-std=gnu99]
// 
// C11: Accept ISO C11 (2011), but not GNU extensions. [-std=c11]
// 
// GNU11: Accept ISO C11 and GNU extensions. [-std=gnu11]
// 
// Compiler Default: Tells the compiler to use its default C language dialect. This is
// normally the best choice unless you have specific needs. (Currently equivalent to
// GNU99.)
// 
// Please see the full GCC manual for the full definition of all these settings on the C
// dialect:
// 
// <http://developer.apple.com/documentation/DeveloperTools/gcc-4.2.1/gcc/C-Dialect-Options.html>

GCC_C_LANGUAGE_STANDARD = gnu99



// No Common Blocks
// 
// In C, allocate even uninitialized global variables in the data section of the object
// file, rather than generating them as common blocks.  This has the effect that if the
// same variable is declared (without extern ) in two different compilations, you will
// get an error when you link them. [-fno-common]

GCC_NO_COMMON_BLOCKS = YES



// Treat Missing Function Prototypes as Errors
// 
// Causes warnings about missing function prototypes to be treated as errors.  Only
// applies to C and Objective-C.  [-Werror-implicit-function-declaration]

GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES



// Treat Incompatible Pointer Type Warnings as Errors
// 
// Enabling this option causes warnings about incompatible pointer types to be treated as
// errors.  [-Werror=incompatible-pointer-types]

GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS = YES



// Implicit Conversion to 32 Bit Type
// 
// Warn if a value is implicitly converted from a 64 bit type to a 32 bit type.  This is
// a subset
// of the warnings provided by -Wconversion.  [-Wshorten-64-to-32]

GCC_WARN_64_TO_32_BIT_CONVERSION = YES



// Missing Fields in Structure Initializers
// 
// Warn if a structure's initializer has some fields missing.  For example, the following
// code would cause such a warning, because "x.h" is implicitly zero:
// 
// struct s { int f, g, h; };
// struct s x = { 3, 4 };
// 
// This option does not warn about designated initializers, so the following modification
// would not trigger a warning:
// 
// struct s { int f, g, h; };
// struct s x = { .f = 3, .g = 4 };
// 
// [-Wmissing-field-initializers]

GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES



// Missing Newline At End Of File
// 
// Warn when a source file does not end with a newline.  [-Wnewline-eof]

GCC_WARN_ABOUT_MISSING_NEWLINE = NO



// Missing Function Prototypes
// 
// Causes warnings to be emitted about missing prototypes.  [-Wmissing-prototypes]

GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES



// Mismatched Return Type
// 
// Causes warnings to be emitted when a function with a defined return type (not void)
// contains a return statement without a return-value.  Also emits a warning when a
// function is defined without specifying a return type.  [-Wreturn-type]

GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR



// Four Character Literals
// 
// Warn about four-char literals (e.g., MacOS-style OSTypes: 'APPL').
// [-Wfour-char-constants]

GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES



// Overloaded Virtual Functions
// 
// Warn when a function declaration hides virtual functions from a base class.
// [-Woverloaded-virtual]
// 
// For example, in:
// 
// struct A {
// virtual void f();
// };
// 
// struct B: public A {
// void f(int);
// };
// 
// the A class version of f() is hidden in B, and code like this:
// 
// B* b;
// b->f();
// 
// will fail to compile. This setting only applies to C++ and Objective-C++ sources.

GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES



// Initializer Not Fully Bracketed
// 
// Warn if an aggregate or union initializer is not fully bracketed.
// 
// Example, Here initializer for a is not fully bracketed, but that for b is fully
// bracketed.
// 
// int a[2][2] = { 0, 1, 2, 3 };
// int b[2][2] = { { 0, 1 }, { 2, 3 } };
// 
// [-Wmissing-braces]

GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES



// Nonvirtual Destructor
// 
// Warn when a class declares an nonvirtual destructor that should probably be virtual,
// because it looks like the class will be used polymorphically.  [-Wnon-virtual-dtor]
// 
// This is only active for C++ or Objective-C++ sources.

GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES



// Hidden Local Variables
// 
// Warn whenever a local variable shadows another local variable, parameter or global
// variable or whenever a built-in function is shadowed.  [-Wshadow]

GCC_WARN_SHADOW = YES



// Sign Comparison
// 
// Warn when a comparison between signed and unsigned values could produce an incorrect
// result when the signed value is converted to unsigned.  [-Wsign-compare]

GCC_WARN_SIGN_COMPARE = YES



// Strict Selector Matching
// 
// Warn if multiple methods with differing argument and/or return types are found for a
// given selector when attempting to send a message using this selector to a receiver of
// type "id" or "Class".  When this setting is disabled, the compiler will omit such
// warnings if any differences found are confined to types which share the same size and
// alignment. [-Wstrict-selector-match]

GCC_WARN_STRICT_SELECTOR_MATCH = YES



// Undeclared Selector
// 
// Warn if a "@selector(...)" expression referring to an undeclared selector is found.  A
// selector is considered undeclared if no method with that name has been declared before
// the "@selector(...)" expression, either explicitly in an @interface or @protocol
// declaration, or implicitly in an @implementation section.  This option always performs
// its checks as soon as a "@selector(...)" expression is found, while -Wselector only
// performs its checks in the final stage of compilation.  This also enforces the coding
// style convention that methods and selectors must be declared before being used.
// [-Wundeclared-selector]

GCC_WARN_UNDECLARED_SELECTOR = YES



// Uninitialized Variables
// 
// Warn if a variable might be clobbered by a setjmp call or if an automatic variable is
// used without prior initialization.
// 
// Note that the compiler may not detect all cases where an automatic variable is
// initialized or all usage patterns that may lead to use prior to initialization.  You
// can toggle between the normal uninitialized value checking or the more aggressive
// (conservative) checking which finds more issues but the checking is much stricter.
// [-Wuninitialized,-Wconditional-uninitialized]

GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE



// Unknown Pragma
// 
// Warn when a #pragma directive is encountered which is not understood by GCC.  If this
// command line option is used, warnings will even be issued for unknown pragmas in
// system header files.  This is not the case if the warnings were only enabled by the
// -Wall command line option.  [-Wunknown-pragmas]

GCC_WARN_UNKNOWN_PRAGMAS = YES



// Unused Functions
// 
// Warn whenever a static function is declared but not defined or a non-inline static
// function is unused.  [-Wunused-function]

GCC_WARN_UNUSED_FUNCTION = YES



// Unused Labels
// 
// Warn whenever a label is declared but not used.  [-Wunused-label]

GCC_WARN_UNUSED_LABEL = YES



// Unused Variables
// 
// Warn whenever a local variable or non-constant static variable is unused aside from
// its declaration.  [-Wunused-variable]

GCC_WARN_UNUSED_VARIABLE = YES



IPHONEOS_DEPLOYMENT_TARGET = 9.0



// Runpath Search Paths
// 
// This is a list of paths to be added to the runpath search path list for the image
// being created.  At runtime, dyld uses the runpath when searching for dylibs whose load
// path begins with '@rpath/'. [-rpath]

LD_RUNPATH_SEARCH_PATHS = $(CONFIGURATION_BUILD_DIR) @loader_path/Frameworks



// Base SDK
// 
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the ADDITIONAL_SDKS
// setting.

SDKROOT = iphoneos



TARGETED_DEVICE_FAMILY = 1,2
